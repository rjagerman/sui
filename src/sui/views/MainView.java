/*
 * TI2730-A Ontology Engineering & Linked Data
 * Assignment 2
 * Rolf Jagerman (4194616)
 */
package sui.views;

import java.awt.CardLayout;
import java.awt.Color;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.openrdf.model.Value;
import org.openrdf.repository.RepositoryException;
import sui.model.FileThread;
import sui.model.QueryThread;
import sui.model.SPARQL;

/**
 * The GUI of the application.
 * 
 * Parts of this code are automatically generated by the NetBeans Swing GUI
 * Builder. Do not edit these parts.
 * 
 * @author Rolf Jagerman
 */
public final class MainView extends javax.swing.JFrame implements ChangeListener {
    
    /**
     * The table model
     */
    protected DefaultTableModel tableModel;
    
    /**
     * The list model
     */
    protected DefaultListModel listModel;
    
    /**
     * The query execution thread
     */
    protected QueryThread queryThread;
    
    /**
     * The file adding thread
     */
    protected FileThread fileThread;
    
    /**
     * The file chooser
     */
    protected JFileChooser fileChooser;

    /**
     * Creates new form MainView
     */
    public MainView() {
        tableModel = new DefaultTableModel();
        listModel = new DefaultListModel();
        fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setFileFilter(new FileNameExtensionFilter("RDF files", "rdf"));
        fileChooser.setDialogTitle("Select RDF file(s)");
        initComponents();
        setProcessingQuery(false);
    }
    
    /**
     * Gets called when the model changes state
     * 
     * @param e The change event
     */
    @Override
    public void stateChanged(ChangeEvent e) {
        
        // Update query related interface components
        if(queryThread != null) {
            String error = queryThread.getError();
            if(error.isEmpty()) {
                String message = "Query success: " + queryThread.getResults().getRows().size() + " result";
                setSuccess(queryThread.getResults().getRows().size() == 1 ? message : message + "s");
                setResults(queryThread);
            } else {
                setError(error, "Query failed");
            }
            setProcessingQuery(false);
            queryThread = null;
        }
        
        // Update file related interface components
        if(fileThread != null) {
            String error = fileThread.getError();
            if(error.isEmpty()) {
                String message = "Added " + fileThread.getFiles().length + " file";
                setSuccess(fileThread.getFiles().length == 1 ? message : message + "s");
            } else {
                setError(error, "Error while adding files");
            }
            setProcessingFiles(false);
            fileThread = null;
        }
        
        listModel.clear();
        for(File file : SPARQL.getFiles()) {
            listModel.addElement(file);
        }
    }
    
    /**
     * Sets the results from given thread
     * 
     * @param thread The thread
     */
    protected void setResults(QueryThread thread) {
        // Remove previous results from the table
        tableModel.setRowCount(0);
        tableModel.setColumnCount(0);

        // Add results to table
        for(String column : thread.getResults().getColumns()) {
            tableModel.addColumn(column);
        }
        for(Value[] row : thread.getResults().getRows()) {
            tableModel.addRow(row);
        }
    }
    
    /**
     * Sets the error if one has occurred
     * 
     * @param error The error
     */
    protected void setError(String error, String errorTitle) {
        
        // Set error message
        jTextAreaError.setText(error);

        // Set output label
        jLabelOutput.setForeground(new Color(128, 0, 0));
        jLabelOutput.setText(errorTitle);

        // Switch to correct card
        CardLayout cl = (CardLayout)(jPanelOutput.getLayout());
        cl.show(jPanelOutput, "cardError");
        
    }
    
    /**
     * Sets the success message
     * 
     * @param success The success message
     */
    protected void setSuccess(String success) {
        
        // Set output label
        jLabelOutput.setForeground(new Color(0, 128, 0));
        jLabelOutput.setText(success);

        // Switch to correct card
        CardLayout cl = (CardLayout)(jPanelOutput.getLayout());
        cl.show(jPanelOutput, "cardResult");
        
    }
    
    /**
     * Locks the UI when it is busy processing a query
     * 
     * @param processing Whether it's processing or not
     */
    protected void setProcessingQuery(boolean processing) {
        setProcessing(processing);
        this.jButtonCancel.setVisible(processing);
        this.jButtonCancel.setEnabled(processing);
        if(processing) {
            this.jLabelOutput.setText("Executing...");
            this.jLabelOutput.setForeground(Color.BLACK);
        }
    }
    
    /**
     * Locks the UI when it is busy processing files
     * 
     * @param processing Whether it's processing or not
     */
    protected void setProcessingFiles(boolean processing) {
        setProcessing(processing);
        if(processing) {
            this.jLabelOutput.setForeground(Color.BLACK);
            this.jLabelOutput.setText("Processing files...");
        }
    }
    
    /**
     * Locks the UI when it is busy processing
     * 
     * @param processing Whether it's processing or not
     */
    protected void setProcessing(boolean processing) {
        this.jTextAreaQuery.setEnabled(!processing);
        this.jListFiles.setEnabled(!processing);
        this.jButtonExecute.setEnabled(!processing);
        this.jButtonClear.setEnabled(!processing);
        this.jButtonAddFile.setEnabled(!processing);
    }
    
    protected void executeQuery() {
        setProcessingQuery(true);
        queryThread.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelQuery = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaQuery = new javax.swing.JTextArea();
        jButtonExecute = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jPanelResults = new javax.swing.JPanel();
        jLabelOutput = new javax.swing.JLabel();
        jPanelOutput = new javax.swing.JPanel();
        jPanelCardResult = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableResults = new javax.swing.JTable();
        jPanelCardError = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaError = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListFiles = new javax.swing.JList();
        jButtonClear = new javax.swing.JButton();
        jButtonAddFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SUI - SPARQL User Interface");

        jSplitPane2.setBorder(null);
        jSplitPane2.setDividerLocation(200);
        jSplitPane2.setContinuousLayout(true);

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setContinuousLayout(true);

        jTextAreaQuery.setColumns(20);
        jTextAreaQuery.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaQuery.setRows(5);
        jTextAreaQuery.setToolTipText("Enter your SPARQL query");
        jScrollPane1.setViewportView(jTextAreaQuery);

        jButtonExecute.setText("Execute Query");
        jButtonExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecuteActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.setEnabled(false);
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelQueryLayout = new javax.swing.GroupLayout(jPanelQuery);
        jPanelQuery.setLayout(jPanelQueryLayout);
        jPanelQueryLayout.setHorizontalGroup(
            jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQueryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanelQueryLayout.createSequentialGroup()
                        .addComponent(jButtonExecute)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCancel)
                        .addGap(0, 395, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelQueryLayout.setVerticalGroup(
            jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQueryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExecute)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        jSplitPane1.setTopComponent(jPanelQuery);

        jLabelOutput.setText(" ");

        jPanelOutput.setLayout(new java.awt.CardLayout());

        jPanelCardResult.setName("panelResult"); // NOI18N

        jTableResults.setAutoCreateRowSorter(true);
        jTableResults.setModel(tableModel);
        jTableResults.setToolTipText("SPARQL results");
        jScrollPane2.setViewportView(jTableResults);

        javax.swing.GroupLayout jPanelCardResultLayout = new javax.swing.GroupLayout(jPanelCardResult);
        jPanelCardResult.setLayout(jPanelCardResultLayout);
        jPanelCardResultLayout.setHorizontalGroup(
            jPanelCardResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCardResultLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelCardResultLayout.setVerticalGroup(
            jPanelCardResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCardResultLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelOutput.add(jPanelCardResult, "cardResult");

        jPanelCardError.setName("panelError"); // NOI18N

        jTextAreaError.setEditable(false);
        jTextAreaError.setBackground(new java.awt.Color(254, 254, 254));
        jTextAreaError.setColumns(20);
        jTextAreaError.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaError.setForeground(new java.awt.Color(128, 0, 0));
        jTextAreaError.setRows(5);
        jTextAreaError.setText("Error");
        jScrollPane3.setViewportView(jTextAreaError);

        javax.swing.GroupLayout jPanelCardErrorLayout = new javax.swing.GroupLayout(jPanelCardError);
        jPanelCardError.setLayout(jPanelCardErrorLayout);
        jPanelCardErrorLayout.setHorizontalGroup(
            jPanelCardErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCardErrorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelCardErrorLayout.setVerticalGroup(
            jPanelCardErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCardErrorLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelOutput.add(jPanelCardError, "cardError");

        javax.swing.GroupLayout jPanelResultsLayout = new javax.swing.GroupLayout(jPanelResults);
        jPanelResults.setLayout(jPanelResultsLayout);
        jPanelResultsLayout.setHorizontalGroup(
            jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelOutput)
                .addContainerGap())
        );
        jPanelResultsLayout.setVerticalGroup(
            jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelOutput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelOutput.getAccessibleContext().setAccessibleDescription("");

        jSplitPane1.setRightComponent(jPanelResults);

        jSplitPane2.setRightComponent(jSplitPane1);

        jListFiles.setModel(listModel);
        jScrollPane4.setViewportView(jListFiles);

        jButtonClear.setText("Clear Repository");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButtonAddFile.setText("Add RDF files");
        jButtonAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonClear, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(jButtonAddFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAddFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClear)
                .addContainerGap())
        );

        jSplitPane2.setLeftComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-824)/2, (screenSize.height-547)/2, 824, 547);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecuteActionPerformed
        String query = jTextAreaQuery.getText();
        queryThread = new QueryThread(query, this);
        executeQuery();
    }//GEN-LAST:event_jButtonExecuteActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        queryThread.stop();
        setError("Executing aborted by user", "Cancelled");
        setProcessingQuery(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddFileActionPerformed
        int returnValue = fileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File[] files = fileChooser.getSelectedFiles();
            setProcessingFiles(true);
            fileThread = new FileThread(files, this);
            fileThread.execute();
        }
    }//GEN-LAST:event_jButtonAddFileActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        try {        
            SPARQL.clearRepository();
        } catch (RepositoryException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        this.stateChanged(null);
    }//GEN-LAST:event_jButtonClearActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddFile;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonExecute;
    private javax.swing.JLabel jLabelOutput;
    private javax.swing.JList jListFiles;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelCardError;
    private javax.swing.JPanel jPanelCardResult;
    private javax.swing.JPanel jPanelOutput;
    private javax.swing.JPanel jPanelQuery;
    private javax.swing.JPanel jPanelResults;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTable jTableResults;
    private javax.swing.JTextArea jTextAreaError;
    private javax.swing.JTextArea jTextAreaQuery;
    // End of variables declaration//GEN-END:variables

}
